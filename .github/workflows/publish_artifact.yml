name: Build release

on:
  push:
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - main

env:
  emsdk_version: 3.1.8 # For use in emscripten build
  ccache_basedir: ${{ github.workspace }}
  ccache_dir: "${{ github.workspace }}/.ccache"
  ccache_compilercheck: content
  ccache_compress: 'true'
  ccache_compresslevel: 9
  ccache_maxsize: 200M
  ccache_cmake: -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

jobs:
  build-wasm:
    name: "emscripten"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set ccache environment for emcc
        run: |
          # We are hardcoding this to mtime instead of env pickup. Rest use content.
          echo "CCACHE_COMPILER_CHECK=mtime" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV
          # https://emscripten.org/docs/compiling/Building-Projects.html#using-a-compiler-wrapper
          echo "EM_COMPILER_WRAPPER=ccache" >> $GITHUB_ENV
      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
          echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
      # This need to be run before setup, so ccache build caching doesn't complain.
      - name: Obtain emsdk sources
        run: |
            git clone --depth 1 https://github.com/emscripten-core/emsdk.git
      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v2
        with:
          path: |
             ${{ env.ccache_dir }}
             ${{ github.workspace }}/emsdk/ccache/git-emscripten_64bit/
          key: ccache-${{ github.job }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ github.job }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ github.job }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ github.job }}-${{ env.emsdk_version }}
      - name: Setup Emscripten toolchain
        run: |
            (cd emsdk && ./emsdk install ${{ env.emsdk_version }} ccache-git-emscripten-64bit)
            (cd emsdk && ./emsdk activate ${{ env.emsdk_version }} ccache-git-emscripten-64bit)
            # mtime of this file is checked by ccache, we set it to avoid cache misses.
            touch -m -d '1 Jan 2021 12:00' emsdk/.emscripten
            # These needs to be done in the activated shell.
            eval $(./emsdk/emsdk construct_env \
                | sed 's/export PATH=\(.*\);/echo \1 >> $GITHUB_PATH;/' \
                | sed 's/export \(.*\);/echo \1 >> $GITHUB_ENV;/' );
            # This looks more permanent than version pinned, so keeping temporarily to avoid failures.
            echo "${{ github.workspace }}/emsdk/ccache/git-emscripten_64bit/bin" >> $GITHUB_PATH
      - name: Verify Emscripten setup
        run: |
            emcc --version
            emcmake cmake --version
            emmake make --version
      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry
      # WORMHOLE=off
      - name: "Configure builds for WORMHOLE=off"
        working-directory: bergamot-translator
        run: |
          mkdir -p build-wasm-without-wormhole
          cd build-wasm-without-wormhole
          emcmake cmake -DCOMPILE_WASM=on -DWORMHOLE=off ..
      - name: "Compile with WORMHOLE=off"
        working-directory: bergamot-translator/build-wasm-without-wormhole
        run: |
          emmake make -j2
      - name: ccache epilog
        run: |
          ccache -s # Print current cache stats
      - name: Upload wasm artifact
        uses: actions/upload-artifact@v2
        with:
          name: wasm-artefacts
          if-no-files-found: error
          path: |
              # Without wormhole
              ${{github.workspace}}/bergamot-translator/build-wasm-without-wormhole/bergamot-translator-worker.js
              ${{github.workspace}}/bergamot-translator/build-wasm-without-wormhole/bergamot-translator-worker.wasm

  build-extension:
    runs-on: ubuntu-latest
    needs:
      - build-wasm
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '17.x'
      - name: Download wasm build
        uses: actions/download-artifact@v2
      - name: Import wasm build
        run: mv wasm-artefacts/bergamot-translator-worker.{js,wasm} extension/controller/translation/
      - name: Write version number
        if: startsWith(github.ref, 'refs/tags/v')
        run: bash .github/deploy-tag.sh
      - name: Install dependencies
        run: npm install
      - name: Run linter
        run: npm run lint:js
        continue-on-error: true
      - name: Build
        run: npm run build
      - name: Upload extension artifact
        uses: actions/upload-artifact@v2
        with:
          name: extension-artefacts
          if-no-files-found: error
          path: ${{github.workspace}}/web-ext-artifacts/bergamot_translations.xpi
      - name: Update development prerelease
        uses: marvinpinto/action-automatic-releases@latest
        if: github.ref == 'refs/heads/main'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: development-latest
          prerelease: true
          title: "Latest Development Build"
          files: |
            ./web-ext-artifacts/bergamot_translations.xpi
      - name: Sign extension
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          WEB_EXT_API_KEY: ${{ secrets.WEB_EXT_API_KEY }}
          WEB_EXT_API_SECRET: ${{ secrets.WEB_EXT_API_SECRET }}
        run: |
          npm run sign
          mv web-ext-artifacts/*-*.*.*.xpi web-ext-artifacts/bergamot_translations-signed.xpi
      - name: Create release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./web-ext-artifacts/bergamot_translations-signed.xpi
          asset_name: bergamot_translations.xpi
          asset_content_type: application/zip